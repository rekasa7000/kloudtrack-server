{"level":"error","message":"Database error: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:11:33\n\n   8 }\n   9 async findAll(skip, take) {\n  10     const [stations, total] = await Promise.all([\n→ 11         this.prisma.station.findMany({\n               skip: NaN,\n               include: {\n                 certificate: true,\n                 user: true,\n                 organization: true\n               },\n               orderBy: {\n                 createdAt: \"desc\"\n               },\n             + take: Int\n             })\n\nArgument `take` is missing.","service":"weather-station-iot","target":"station.findMany","timestamp":"2025-05-22T03:09:35.808Z"}
{"clientVersion":"6.7.0","level":"error","message":"Failed to get all stations: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:11:33\n\n   8 }\n   9 async findAll(skip, take) {\n  10     const [stations, total] = await Promise.all([\n→ 11         this.prisma.station.findMany({\n               skip: NaN,\n               include: {\n                 certificate: true,\n                 user: true,\n                 organization: true\n               },\n               orderBy: {\n                 createdAt: \"desc\"\n               },\n             + take: Int\n             })\n\nArgument `take` is missing.","name":"PrismaClientValidationError","service":"weather-station-iot","stack":"PrismaClientValidationError: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:11:33\n\n   8 }\n   9 async findAll(skip, take) {\n  10     const [stations, total] = await Promise.all([\n→ 11         this.prisma.station.findMany({\n               skip: NaN,\n               include: {\n                 certificate: true,\n                 user: true,\n                 organization: true\n               },\n               orderBy: {\n                 createdAt: \"desc\"\n               },\n             + take: Int\n             })\n\nArgument `take` is missing.\n    at An (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:32:1363)\n    at zn.handleRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:7102)\n    at zn.handleAndLogRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6784)\n    at zn.request (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6491)\n    at async l (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:133:9778)\n    at async Promise.all (index 0)\n    at async StationRepository.findAll (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:10:35)\n    at async StationService.getAllStations (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/service.js:42:26)\n    at async /home/rekasa/Projects/Kloudtrack/server/dist/modules/station/controller.js:15:26","timestamp":"2025-05-22T03:09:35.809Z"}
{"level":"error","message":"[GET] /api/v1/station >> 500: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:11:33\n\n   8 }\n   9 async findAll(skip, take) {\n  10     const [stations, total] = await Promise.all([\n→ 11         this.prisma.station.findMany({\n               skip: NaN,\n               include: {\n                 certificate: true,\n                 user: true,\n                 organization: true\n               },\n               orderBy: {\n                 createdAt: \"desc\"\n               },\n             + take: Int\n             })\n\nArgument `take` is missing.","service":"weather-station-iot","stack":"PrismaClientValidationError: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:11:33\n\n   8 }\n   9 async findAll(skip, take) {\n  10     const [stations, total] = await Promise.all([\n→ 11         this.prisma.station.findMany({\n               skip: NaN,\n               include: {\n                 certificate: true,\n                 user: true,\n                 organization: true\n               },\n               orderBy: {\n                 createdAt: \"desc\"\n               },\n             + take: Int\n             })\n\nArgument `take` is missing.\n    at An (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:32:1363)\n    at zn.handleRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:7102)\n    at zn.handleAndLogRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6784)\n    at zn.request (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6491)\n    at async l (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:133:9778)\n    at async Promise.all (index 0)\n    at async StationRepository.findAll (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:10:35)\n    at async StationService.getAllStations (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/service.js:42:26)\n    at async /home/rekasa/Projects/Kloudtrack/server/dist/modules/station/controller.js:15:26","timestamp":"2025-05-22T03:09:35.810Z"}
{"level":"error","message":"Database error: \nInvalid `database_config_1.prisma.user.findUnique()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/core/middlewares/auth.middleware.js:19:65\n\n  16     return next(new error_1.AppError(\"You are not logged in. Please log in to get access.\", 401));\n  17 }\n  18 const decoded = jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret);\n→ 19 const currentUser = await database_config_1.prisma.user.findUnique({\n       where: {\n         id: undefined,\n     ?   userName?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   firstName?: StringNullableFilter | String | Null,\n     ?   lastName?: StringNullableFilter | String | Null,\n     ?   role?: EnumRoleFilter | Role,\n     ?   password?: StringFilter | String,\n     ?   phone?: StringNullableFilter | String | Null,\n     ?   profilePicture?: StringNullableFilter | String | Null,\n     ?   createdByUserId?: IntNullableFilter | Int | Null,\n     ?   passwordChangedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdBy?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n     ?   createdUsers?: UserListRelationFilter,\n     ?   userOrganizations?: UserOrganizationListRelationFilter,\n     ?   command?: CommandListRelationFilter,\n     ?   station?: StationListRelationFilter,\n     ?   rootCertificate?: RootCertificateListRelationFilter,\n     ?   problemReport?: ProblemReportListRelationFilter,\n     ?   stationCertificate?: StationCertificateListRelationFilter,\n     ?   resetToken?: ResetTokenListRelationFilter\n       },\n       select: {\n         id: true,\n         email: true,\n         role: true,\n         passwordChangedAt: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `userName` or `email` arguments. Available options are marked with ?.","service":"weather-station-iot","target":"user.findUnique","timestamp":"2025-05-22T05:53:11.114Z"}
{"level":"error","message":"Database error: \nInvalid `database_config_1.prisma.user.findUnique()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/core/middlewares/auth.middleware.js:19:65\n\n  16     return next(new error_1.AppError(\"You are not logged in. Please log in to get access.\", 401));\n  17 }\n  18 const decoded = jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret);\n→ 19 const currentUser = await database_config_1.prisma.user.findUnique({\n       where: {\n         id: undefined,\n     ?   userName?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   firstName?: StringNullableFilter | String | Null,\n     ?   lastName?: StringNullableFilter | String | Null,\n     ?   role?: EnumRoleFilter | Role,\n     ?   password?: StringFilter | String,\n     ?   phone?: StringNullableFilter | String | Null,\n     ?   profilePicture?: StringNullableFilter | String | Null,\n     ?   createdByUserId?: IntNullableFilter | Int | Null,\n     ?   passwordChangedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdBy?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n     ?   createdUsers?: UserListRelationFilter,\n     ?   userOrganizations?: UserOrganizationListRelationFilter,\n     ?   command?: CommandListRelationFilter,\n     ?   station?: StationListRelationFilter,\n     ?   rootCertificate?: RootCertificateListRelationFilter,\n     ?   problemReport?: ProblemReportListRelationFilter,\n     ?   stationCertificate?: StationCertificateListRelationFilter,\n     ?   resetToken?: ResetTokenListRelationFilter\n       },\n       select: {\n         id: true,\n         email: true,\n         role: true,\n         passwordChangedAt: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `userName` or `email` arguments. Available options are marked with ?.","service":"weather-station-iot","target":"user.findUnique","timestamp":"2025-05-22T05:54:18.438Z"}
{"level":"error","message":"Database error: \nInvalid `database_config_1.prisma.user.findUnique()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/core/middlewares/auth.middleware.js:19:65\n\n  16     return next(new error_1.AppError(\"You are not logged in. Please log in to get access.\", 401));\n  17 }\n  18 const decoded = jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret);\n→ 19 const currentUser = await database_config_1.prisma.user.findUnique({\n       where: {\n         id: undefined,\n     ?   userName?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   firstName?: StringNullableFilter | String | Null,\n     ?   lastName?: StringNullableFilter | String | Null,\n     ?   role?: EnumRoleFilter | Role,\n     ?   password?: StringFilter | String,\n     ?   phone?: StringNullableFilter | String | Null,\n     ?   profilePicture?: StringNullableFilter | String | Null,\n     ?   createdByUserId?: IntNullableFilter | Int | Null,\n     ?   passwordChangedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdBy?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n     ?   createdUsers?: UserListRelationFilter,\n     ?   userOrganizations?: UserOrganizationListRelationFilter,\n     ?   command?: CommandListRelationFilter,\n     ?   station?: StationListRelationFilter,\n     ?   rootCertificate?: RootCertificateListRelationFilter,\n     ?   problemReport?: ProblemReportListRelationFilter,\n     ?   stationCertificate?: StationCertificateListRelationFilter,\n     ?   resetToken?: ResetTokenListRelationFilter\n       },\n       select: {\n         id: true,\n         email: true,\n         role: true,\n         passwordChangedAt: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `userName` or `email` arguments. Available options are marked with ?.","service":"weather-station-iot","target":"user.findUnique","timestamp":"2025-05-22T05:59:44.181Z"}
{"level":"error","message":"Database error: \nInvalid `database_config_1.prisma.user.findUnique()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/core/middlewares/auth.middleware.js:19:65\n\n  16     return next(new error_1.AppError(\"You are not logged in. Please log in to get access.\", 401));\n  17 }\n  18 const decoded = jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret);\n→ 19 const currentUser = await database_config_1.prisma.user.findUnique({\n       where: {\n         id: undefined,\n     ?   userName?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   firstName?: StringNullableFilter | String | Null,\n     ?   lastName?: StringNullableFilter | String | Null,\n     ?   role?: EnumRoleFilter | Role,\n     ?   password?: StringFilter | String,\n     ?   phone?: StringNullableFilter | String | Null,\n     ?   profilePicture?: StringNullableFilter | String | Null,\n     ?   createdByUserId?: IntNullableFilter | Int | Null,\n     ?   passwordChangedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdBy?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n     ?   createdUsers?: UserListRelationFilter,\n     ?   userOrganizations?: UserOrganizationListRelationFilter,\n     ?   command?: CommandListRelationFilter,\n     ?   station?: StationListRelationFilter,\n     ?   rootCertificate?: RootCertificateListRelationFilter,\n     ?   problemReport?: ProblemReportListRelationFilter,\n     ?   stationCertificate?: StationCertificateListRelationFilter,\n     ?   resetToken?: ResetTokenListRelationFilter\n       },\n       select: {\n         id: true,\n         email: true,\n         role: true,\n         passwordChangedAt: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `userName` or `email` arguments. Available options are marked with ?.","service":"weather-station-iot","target":"user.findUnique","timestamp":"2025-05-22T05:59:45.511Z"}
{"level":"error","message":"Database error: \nInvalid `database_config_1.prisma.user.findUnique()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/core/middlewares/auth.middleware.js:19:65\n\n  16     return next(new error_1.AppError(\"You are not logged in. Please log in to get access.\", 401));\n  17 }\n  18 const decoded = jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret);\n→ 19 const currentUser = await database_config_1.prisma.user.findUnique({\n       where: {\n         id: undefined,\n     ?   userName?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   firstName?: StringNullableFilter | String | Null,\n     ?   lastName?: StringNullableFilter | String | Null,\n     ?   role?: EnumRoleFilter | Role,\n     ?   password?: StringFilter | String,\n     ?   phone?: StringNullableFilter | String | Null,\n     ?   profilePicture?: StringNullableFilter | String | Null,\n     ?   createdByUserId?: IntNullableFilter | Int | Null,\n     ?   passwordChangedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdBy?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n     ?   createdUsers?: UserListRelationFilter,\n     ?   userOrganizations?: UserOrganizationListRelationFilter,\n     ?   command?: CommandListRelationFilter,\n     ?   station?: StationListRelationFilter,\n     ?   rootCertificate?: RootCertificateListRelationFilter,\n     ?   problemReport?: ProblemReportListRelationFilter,\n     ?   stationCertificate?: StationCertificateListRelationFilter,\n     ?   resetToken?: ResetTokenListRelationFilter\n       },\n       select: {\n         id: true,\n         email: true,\n         role: true,\n         passwordChangedAt: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `userName` or `email` arguments. Available options are marked with ?.","service":"weather-station-iot","target":"user.findUnique","timestamp":"2025-05-22T05:59:46.758Z"}
{"level":"error","message":"Database error: \nInvalid `database_config_1.prisma.user.findUnique()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/core/middlewares/auth.middleware.js:19:65\n\n  16     return next(new error_1.AppError(\"You are not logged in. Please log in to get access.\", 401));\n  17 }\n  18 const decoded = jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret);\n→ 19 const currentUser = await database_config_1.prisma.user.findUnique({\n       where: {\n         id: undefined,\n     ?   userName?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   firstName?: StringNullableFilter | String | Null,\n     ?   lastName?: StringNullableFilter | String | Null,\n     ?   role?: EnumRoleFilter | Role,\n     ?   password?: StringFilter | String,\n     ?   phone?: StringNullableFilter | String | Null,\n     ?   profilePicture?: StringNullableFilter | String | Null,\n     ?   createdByUserId?: IntNullableFilter | Int | Null,\n     ?   passwordChangedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdBy?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n     ?   createdUsers?: UserListRelationFilter,\n     ?   userOrganizations?: UserOrganizationListRelationFilter,\n     ?   command?: CommandListRelationFilter,\n     ?   station?: StationListRelationFilter,\n     ?   rootCertificate?: RootCertificateListRelationFilter,\n     ?   problemReport?: ProblemReportListRelationFilter,\n     ?   stationCertificate?: StationCertificateListRelationFilter,\n     ?   resetToken?: ResetTokenListRelationFilter\n       },\n       select: {\n         id: true,\n         email: true,\n         role: true,\n         passwordChangedAt: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `userName` or `email` arguments. Available options are marked with ?.","service":"weather-station-iot","target":"user.findUnique","timestamp":"2025-05-22T06:01:38.791Z"}
{"level":"error","message":"Database error: \nInvalid `database_config_1.prisma.user.findUnique()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/core/middlewares/auth.middleware.js:19:65\n\n  16     return next(new error_1.AppError(\"You are not logged in. Please log in to get access.\", 401));\n  17 }\n  18 const decoded = jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret);\n→ 19 const currentUser = await database_config_1.prisma.user.findUnique({\n       where: {\n         id: undefined,\n     ?   userName?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   firstName?: StringNullableFilter | String | Null,\n     ?   lastName?: StringNullableFilter | String | Null,\n     ?   role?: EnumRoleFilter | Role,\n     ?   password?: StringFilter | String,\n     ?   phone?: StringNullableFilter | String | Null,\n     ?   profilePicture?: StringNullableFilter | String | Null,\n     ?   createdByUserId?: IntNullableFilter | Int | Null,\n     ?   passwordChangedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdBy?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n     ?   createdUsers?: UserListRelationFilter,\n     ?   userOrganizations?: UserOrganizationListRelationFilter,\n     ?   command?: CommandListRelationFilter,\n     ?   station?: StationListRelationFilter,\n     ?   rootCertificate?: RootCertificateListRelationFilter,\n     ?   problemReport?: ProblemReportListRelationFilter,\n     ?   stationCertificate?: StationCertificateListRelationFilter,\n     ?   resetToken?: ResetTokenListRelationFilter\n       },\n       select: {\n         id: true,\n         email: true,\n         role: true,\n         passwordChangedAt: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `userName` or `email` arguments. Available options are marked with ?.","service":"weather-station-iot","target":"user.findUnique","timestamp":"2025-05-22T06:03:49.201Z"}
{"level":"error","message":"Database error: \nInvalid `database_config_1.prisma.user.findUnique()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/core/middlewares/auth.middleware.js:19:65\n\n  16     return next(new error_1.AppError(\"You are not logged in. Please log in to get access.\", 401));\n  17 }\n  18 const decoded = jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret);\n→ 19 const currentUser = await database_config_1.prisma.user.findUnique({\n       where: {\n         id: undefined,\n     ?   userName?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   firstName?: StringNullableFilter | String | Null,\n     ?   lastName?: StringNullableFilter | String | Null,\n     ?   role?: EnumRoleFilter | Role,\n     ?   password?: StringFilter | String,\n     ?   phone?: StringNullableFilter | String | Null,\n     ?   profilePicture?: StringNullableFilter | String | Null,\n     ?   createdByUserId?: IntNullableFilter | Int | Null,\n     ?   passwordChangedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdBy?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n     ?   createdUsers?: UserListRelationFilter,\n     ?   userOrganizations?: UserOrganizationListRelationFilter,\n     ?   command?: CommandListRelationFilter,\n     ?   station?: StationListRelationFilter,\n     ?   rootCertificate?: RootCertificateListRelationFilter,\n     ?   problemReport?: ProblemReportListRelationFilter,\n     ?   stationCertificate?: StationCertificateListRelationFilter,\n     ?   resetToken?: ResetTokenListRelationFilter\n       },\n       select: {\n         id: true,\n         email: true,\n         role: true,\n         passwordChangedAt: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `userName` or `email` arguments. Available options are marked with ?.","service":"weather-station-iot","target":"user.findUnique","timestamp":"2025-05-22T06:04:24.612Z"}
{"level":"error","message":"Database error: \nInvalid `database_config_1.prisma.user.findUnique()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/core/middlewares/auth.middleware.js:22:69\n\n  19     return next(new error_1.AppError(\"You are not logged in. Please log in to get access.\", 401));\n  20 }\n  21 const decoded = jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret);\n→ 22 const currentUser = await database_config_1.prisma.user.findUnique({\n       where: {\n         id: undefined,\n     ?   userName?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   firstName?: StringNullableFilter | String | Null,\n     ?   lastName?: StringNullableFilter | String | Null,\n     ?   role?: EnumRoleFilter | Role,\n     ?   password?: StringFilter | String,\n     ?   phone?: StringNullableFilter | String | Null,\n     ?   profilePicture?: StringNullableFilter | String | Null,\n     ?   createdByUserId?: IntNullableFilter | Int | Null,\n     ?   passwordChangedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdBy?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n     ?   createdUsers?: UserListRelationFilter,\n     ?   userOrganizations?: UserOrganizationListRelationFilter,\n     ?   command?: CommandListRelationFilter,\n     ?   station?: StationListRelationFilter,\n     ?   rootCertificate?: RootCertificateListRelationFilter,\n     ?   problemReport?: ProblemReportListRelationFilter,\n     ?   stationCertificate?: StationCertificateListRelationFilter,\n     ?   resetToken?: ResetTokenListRelationFilter\n       },\n       select: {\n         id: true,\n         email: true,\n         role: true,\n         passwordChangedAt: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `userName` or `email` arguments. Available options are marked with ?.","service":"weather-station-iot","target":"user.findUnique","timestamp":"2025-05-22T06:08:58.745Z"}
{"level":"error","message":"Database error: \nInvalid `database_config_1.prisma.user.findUnique()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/core/middlewares/auth.middleware.js:23:69\n\n  20 }\n  21 console.log(token);\n  22 const decoded = jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret);\n→ 23 const currentUser = await database_config_1.prisma.user.findUnique({\n       where: {\n         id: undefined,\n     ?   userName?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   firstName?: StringNullableFilter | String | Null,\n     ?   lastName?: StringNullableFilter | String | Null,\n     ?   role?: EnumRoleFilter | Role,\n     ?   password?: StringFilter | String,\n     ?   phone?: StringNullableFilter | String | Null,\n     ?   profilePicture?: StringNullableFilter | String | Null,\n     ?   createdByUserId?: IntNullableFilter | Int | Null,\n     ?   passwordChangedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdBy?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n     ?   createdUsers?: UserListRelationFilter,\n     ?   userOrganizations?: UserOrganizationListRelationFilter,\n     ?   command?: CommandListRelationFilter,\n     ?   station?: StationListRelationFilter,\n     ?   rootCertificate?: RootCertificateListRelationFilter,\n     ?   problemReport?: ProblemReportListRelationFilter,\n     ?   stationCertificate?: StationCertificateListRelationFilter,\n     ?   resetToken?: ResetTokenListRelationFilter\n       },\n       select: {\n         id: true,\n         email: true,\n         role: true,\n         passwordChangedAt: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `userName` or `email` arguments. Available options are marked with ?.","service":"weather-station-iot","target":"user.findUnique","timestamp":"2025-05-22T06:09:53.653Z"}
{"level":"error","message":"Database error: \nInvalid `database_config_1.prisma.user.findUnique()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/core/middlewares/auth.middleware.js:23:69\n\n  20 }\n  21 console.log(token);\n  22 const decoded = jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret);\n→ 23 const currentUser = await database_config_1.prisma.user.findUnique({\n       where: {\n         id: undefined,\n     ?   userName?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   firstName?: StringNullableFilter | String | Null,\n     ?   lastName?: StringNullableFilter | String | Null,\n     ?   role?: EnumRoleFilter | Role,\n     ?   password?: StringFilter | String,\n     ?   phone?: StringNullableFilter | String | Null,\n     ?   profilePicture?: StringNullableFilter | String | Null,\n     ?   createdByUserId?: IntNullableFilter | Int | Null,\n     ?   passwordChangedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdBy?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n     ?   createdUsers?: UserListRelationFilter,\n     ?   userOrganizations?: UserOrganizationListRelationFilter,\n     ?   command?: CommandListRelationFilter,\n     ?   station?: StationListRelationFilter,\n     ?   rootCertificate?: RootCertificateListRelationFilter,\n     ?   problemReport?: ProblemReportListRelationFilter,\n     ?   stationCertificate?: StationCertificateListRelationFilter,\n     ?   resetToken?: ResetTokenListRelationFilter\n       },\n       select: {\n         id: true,\n         email: true,\n         role: true,\n         passwordChangedAt: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `userName` or `email` arguments. Available options are marked with ?.","service":"weather-station-iot","target":"user.findUnique","timestamp":"2025-05-22T06:16:33.195Z"}
{"level":"error","message":"Database error: \nInvalid `database_config_1.prisma.user.findUnique()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/core/middlewares/auth.middleware.js:23:69\n\n  20 }\n  21 const decoded = jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret);\n  22 console.log(\"DECODED JWT\", decoded);\n→ 23 const currentUser = await database_config_1.prisma.user.findUnique({\n       where: {\n         id: undefined,\n     ?   userName?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   firstName?: StringNullableFilter | String | Null,\n     ?   lastName?: StringNullableFilter | String | Null,\n     ?   role?: EnumRoleFilter | Role,\n     ?   password?: StringFilter | String,\n     ?   phone?: StringNullableFilter | String | Null,\n     ?   profilePicture?: StringNullableFilter | String | Null,\n     ?   createdByUserId?: IntNullableFilter | Int | Null,\n     ?   passwordChangedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdBy?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n     ?   createdUsers?: UserListRelationFilter,\n     ?   userOrganizations?: UserOrganizationListRelationFilter,\n     ?   command?: CommandListRelationFilter,\n     ?   station?: StationListRelationFilter,\n     ?   rootCertificate?: RootCertificateListRelationFilter,\n     ?   problemReport?: ProblemReportListRelationFilter,\n     ?   stationCertificate?: StationCertificateListRelationFilter,\n     ?   resetToken?: ResetTokenListRelationFilter\n       },\n       select: {\n         id: true,\n         email: true,\n         role: true,\n         passwordChangedAt: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `userName` or `email` arguments. Available options are marked with ?.","service":"weather-station-iot","target":"user.findUnique","timestamp":"2025-05-22T06:17:29.451Z"}
{"level":"error","message":"Database error: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:11:33\n\n   8 }\n   9 async findAll(skip, take) {\n  10     const [stations, total] = await Promise.all([\n→ 11         this.prisma.station.findMany(\nError in query graph construction: AssertionError(\"Invalid value for skip argument: Value can only be positive, found: -3\")","target":"station.findMany","timestamp":"2025-05-22T06:48:07.114Z"}
{"clientVersion":"6.7.0","level":"error","message":"Failed to get all stations: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:11:33\n\n   8 }\n   9 async findAll(skip, take) {\n  10     const [stations, total] = await Promise.all([\n→ 11         this.prisma.station.findMany(\nError in query graph construction: AssertionError(\"Invalid value for skip argument: Value can only be positive, found: -3\")","name":"PrismaClientUnknownRequestError","stack":"PrismaClientUnknownRequestError: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:11:33\n\n   8 }\n   9 async findAll(skip, take) {\n  10     const [stations, total] = await Promise.all([\n→ 11         this.prisma.station.findMany(\nError in query graph construction: AssertionError(\"Invalid value for skip argument: Value can only be positive, found: -3\")\n    at zn.handleRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:7649)\n    at zn.handleAndLogRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6784)\n    at zn.request (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6491)\n    at async l (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:133:9778)\n    at async Promise.all (index 0)\n    at async StationRepository.findAll (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:10:35)\n    at async StationService.getAllStations (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/service.js:42:26)\n    at async /home/rekasa/Projects/Kloudtrack/server/dist/modules/station/controller.js:15:26","timestamp":"2025-05-22T06:48:07.115Z"}
{"level":"error","message":"[GET] /api/v1/station >> 500: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:11:33\n\n   8 }\n   9 async findAll(skip, take) {\n  10     const [stations, total] = await Promise.all([\n→ 11         this.prisma.station.findMany(\nError in query graph construction: AssertionError(\"Invalid value for skip argument: Value can only be positive, found: -3\")","stack":"PrismaClientUnknownRequestError: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:11:33\n\n   8 }\n   9 async findAll(skip, take) {\n  10     const [stations, total] = await Promise.all([\n→ 11         this.prisma.station.findMany(\nError in query graph construction: AssertionError(\"Invalid value for skip argument: Value can only be positive, found: -3\")\n    at zn.handleRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:7649)\n    at zn.handleAndLogRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6784)\n    at zn.request (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6491)\n    at async l (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:133:9778)\n    at async Promise.all (index 0)\n    at async StationRepository.findAll (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:10:35)\n    at async StationService.getAllStations (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/service.js:42:26)\n    at async /home/rekasa/Projects/Kloudtrack/server/dist/modules/station/controller.js:15:26","timestamp":"2025-05-22T06:48:07.116Z"}
{"level":"error","message":"Database error: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:13:33\n\n  10 console.log(\"SKIP: \", skip);\n  11 console.log(\"TAKE: \", take);\n  12 const [stations, total] = await Promise.all([\n→ 13     this.prisma.station.findMany(\nError in query graph construction: AssertionError(\"Invalid value for skip argument: Value can only be positive, found: -3\")","target":"station.findMany","timestamp":"2025-05-22T06:49:43.084Z"}
{"clientVersion":"6.7.0","level":"error","message":"Failed to get all stations: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:13:33\n\n  10 console.log(\"SKIP: \", skip);\n  11 console.log(\"TAKE: \", take);\n  12 const [stations, total] = await Promise.all([\n→ 13     this.prisma.station.findMany(\nError in query graph construction: AssertionError(\"Invalid value for skip argument: Value can only be positive, found: -3\")","name":"PrismaClientUnknownRequestError","stack":"PrismaClientUnknownRequestError: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:13:33\n\n  10 console.log(\"SKIP: \", skip);\n  11 console.log(\"TAKE: \", take);\n  12 const [stations, total] = await Promise.all([\n→ 13     this.prisma.station.findMany(\nError in query graph construction: AssertionError(\"Invalid value for skip argument: Value can only be positive, found: -3\")\n    at zn.handleRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:7649)\n    at zn.handleAndLogRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6784)\n    at zn.request (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6491)\n    at async l (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:133:9778)\n    at async Promise.all (index 0)\n    at async StationRepository.findAll (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:12:35)\n    at async StationService.getAllStations (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/service.js:42:26)\n    at async /home/rekasa/Projects/Kloudtrack/server/dist/modules/station/controller.js:15:26","timestamp":"2025-05-22T06:49:43.084Z"}
{"level":"error","message":"[GET] /api/v1/station >> 500: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:13:33\n\n  10 console.log(\"SKIP: \", skip);\n  11 console.log(\"TAKE: \", take);\n  12 const [stations, total] = await Promise.all([\n→ 13     this.prisma.station.findMany(\nError in query graph construction: AssertionError(\"Invalid value for skip argument: Value can only be positive, found: -3\")","stack":"PrismaClientUnknownRequestError: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:13:33\n\n  10 console.log(\"SKIP: \", skip);\n  11 console.log(\"TAKE: \", take);\n  12 const [stations, total] = await Promise.all([\n→ 13     this.prisma.station.findMany(\nError in query graph construction: AssertionError(\"Invalid value for skip argument: Value can only be positive, found: -3\")\n    at zn.handleRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:7649)\n    at zn.handleAndLogRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6784)\n    at zn.request (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6491)\n    at async l (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:133:9778)\n    at async Promise.all (index 0)\n    at async StationRepository.findAll (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:12:35)\n    at async StationService.getAllStations (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/service.js:42:26)\n    at async /home/rekasa/Projects/Kloudtrack/server/dist/modules/station/controller.js:15:26","timestamp":"2025-05-22T06:49:43.085Z"}
{"level":"error","message":"Database error: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:13:33\n\n  10 console.log(\"SKIP: \", skip);\n  11 console.log(\"TAKE: \", take);\n  12 const [stations, total] = await Promise.all([\n→ 13     this.prisma.station.findMany(\nError in query graph construction: AssertionError(\"Invalid value for skip argument: Value can only be positive, found: -3\")","target":"station.findMany","timestamp":"2025-05-22T06:50:25.502Z"}
{"clientVersion":"6.7.0","level":"error","message":"Failed to get all stations: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:13:33\n\n  10 console.log(\"SKIP: \", skip);\n  11 console.log(\"TAKE: \", take);\n  12 const [stations, total] = await Promise.all([\n→ 13     this.prisma.station.findMany(\nError in query graph construction: AssertionError(\"Invalid value for skip argument: Value can only be positive, found: -3\")","name":"PrismaClientUnknownRequestError","stack":"PrismaClientUnknownRequestError: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:13:33\n\n  10 console.log(\"SKIP: \", skip);\n  11 console.log(\"TAKE: \", take);\n  12 const [stations, total] = await Promise.all([\n→ 13     this.prisma.station.findMany(\nError in query graph construction: AssertionError(\"Invalid value for skip argument: Value can only be positive, found: -3\")\n    at zn.handleRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:7649)\n    at zn.handleAndLogRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6784)\n    at zn.request (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6491)\n    at async l (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:133:9778)\n    at async Promise.all (index 0)\n    at async StationRepository.findAll (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:12:35)\n    at async StationService.getAllStations (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/service.js:43:26)\n    at async /home/rekasa/Projects/Kloudtrack/server/dist/modules/station/controller.js:15:26","timestamp":"2025-05-22T06:50:25.504Z"}
{"level":"error","message":"[GET] /api/v1/station >> 500: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:13:33\n\n  10 console.log(\"SKIP: \", skip);\n  11 console.log(\"TAKE: \", take);\n  12 const [stations, total] = await Promise.all([\n→ 13     this.prisma.station.findMany(\nError in query graph construction: AssertionError(\"Invalid value for skip argument: Value can only be positive, found: -3\")","stack":"PrismaClientUnknownRequestError: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:13:33\n\n  10 console.log(\"SKIP: \", skip);\n  11 console.log(\"TAKE: \", take);\n  12 const [stations, total] = await Promise.all([\n→ 13     this.prisma.station.findMany(\nError in query graph construction: AssertionError(\"Invalid value for skip argument: Value can only be positive, found: -3\")\n    at zn.handleRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:7649)\n    at zn.handleAndLogRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6784)\n    at zn.request (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6491)\n    at async l (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:133:9778)\n    at async Promise.all (index 0)\n    at async StationRepository.findAll (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:12:35)\n    at async StationService.getAllStations (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/service.js:43:26)\n    at async /home/rekasa/Projects/Kloudtrack/server/dist/modules/station/controller.js:15:26","timestamp":"2025-05-22T06:50:25.506Z"}
{"level":"error","message":"Database error: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:13:33\n\n  10 console.log(\"SKIP: \", skip);\n  11 console.log(\"TAKE: \", take);\n  12 const [stations, total] = await Promise.all([\n→ 13     this.prisma.station.findMany(\nError in query graph construction: AssertionError(\"Invalid value for skip argument: Value can only be positive, found: -3\")","target":"station.findMany","timestamp":"2025-05-22T06:50:41.188Z"}
{"clientVersion":"6.7.0","level":"error","message":"Failed to get all stations: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:13:33\n\n  10 console.log(\"SKIP: \", skip);\n  11 console.log(\"TAKE: \", take);\n  12 const [stations, total] = await Promise.all([\n→ 13     this.prisma.station.findMany(\nError in query graph construction: AssertionError(\"Invalid value for skip argument: Value can only be positive, found: -3\")","name":"PrismaClientUnknownRequestError","stack":"PrismaClientUnknownRequestError: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:13:33\n\n  10 console.log(\"SKIP: \", skip);\n  11 console.log(\"TAKE: \", take);\n  12 const [stations, total] = await Promise.all([\n→ 13     this.prisma.station.findMany(\nError in query graph construction: AssertionError(\"Invalid value for skip argument: Value can only be positive, found: -3\")\n    at zn.handleRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:7649)\n    at zn.handleAndLogRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6784)\n    at zn.request (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6491)\n    at async l (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:133:9778)\n    at async Promise.all (index 0)\n    at async StationRepository.findAll (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:12:35)\n    at async StationService.getAllStations (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/service.js:43:26)\n    at async /home/rekasa/Projects/Kloudtrack/server/dist/modules/station/controller.js:15:26","timestamp":"2025-05-22T06:50:41.190Z"}
{"level":"error","message":"[GET] /api/v1/station >> 500: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:13:33\n\n  10 console.log(\"SKIP: \", skip);\n  11 console.log(\"TAKE: \", take);\n  12 const [stations, total] = await Promise.all([\n→ 13     this.prisma.station.findMany(\nError in query graph construction: AssertionError(\"Invalid value for skip argument: Value can only be positive, found: -3\")","stack":"PrismaClientUnknownRequestError: \nInvalid `this.prisma.station.findMany()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:13:33\n\n  10 console.log(\"SKIP: \", skip);\n  11 console.log(\"TAKE: \", take);\n  12 const [stations, total] = await Promise.all([\n→ 13     this.prisma.station.findMany(\nError in query graph construction: AssertionError(\"Invalid value for skip argument: Value can only be positive, found: -3\")\n    at zn.handleRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:7649)\n    at zn.handleAndLogRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6784)\n    at zn.request (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6491)\n    at async l (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:133:9778)\n    at async Promise.all (index 0)\n    at async StationRepository.findAll (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:12:35)\n    at async StationService.getAllStations (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/service.js:43:26)\n    at async /home/rekasa/Projects/Kloudtrack/server/dist/modules/station/controller.js:15:26","timestamp":"2025-05-22T06:50:41.194Z"}
{"level":"error","message":"Database error: \nInvalid `this.prisma.station.create()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:31:36\n\n  28     };\n  29 }\n  30 async create(data, userId) {\n→ 31     return this.prisma.station.create(\nUnique constraint failed on the fields: (`serial_code`)","target":"station.create","timestamp":"2025-05-22T06:55:09.976Z"}
{"clientVersion":"6.7.0","code":"P2002","level":"error","message":"Failed to create station: \nInvalid `this.prisma.station.create()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:31:36\n\n  28     };\n  29 }\n  30 async create(data, userId) {\n→ 31     return this.prisma.station.create(\nUnique constraint failed on the fields: (`serial_code`)","meta":{"modelName":"Station","target":["serial_code"]},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `this.prisma.station.create()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:31:36\n\n  28     };\n  29 }\n  30 async create(data, userId) {\n→ 31     return this.prisma.station.create(\nUnique constraint failed on the fields: (`serial_code`)\n    at zn.handleRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:7459)\n    at zn.handleAndLogRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6784)\n    at zn.request (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6491)\n    at async l (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:133:9778)\n    at async StationService.createStation (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/service.js:12:29)\n    at async /home/rekasa/Projects/Kloudtrack/server/dist/modules/station/controller.js:22:28","timestamp":"2025-05-22T06:55:09.976Z"}
{"level":"error","message":"[POST] /api/v1/station >> 500: \nInvalid `this.prisma.station.create()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:31:36\n\n  28     };\n  29 }\n  30 async create(data, userId) {\n→ 31     return this.prisma.station.create(\nUnique constraint failed on the fields: (`serial_code`)","stack":"PrismaClientKnownRequestError: \nInvalid `this.prisma.station.create()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:31:36\n\n  28     };\n  29 }\n  30 async create(data, userId) {\n→ 31     return this.prisma.station.create(\nUnique constraint failed on the fields: (`serial_code`)\n    at zn.handleRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:7459)\n    at zn.handleAndLogRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6784)\n    at zn.request (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6491)\n    at async l (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:133:9778)\n    at async StationService.createStation (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/service.js:12:29)\n    at async /home/rekasa/Projects/Kloudtrack/server/dist/modules/station/controller.js:22:28","timestamp":"2025-05-22T06:55:09.978Z"}
{"level":"error","message":"[POST] /api/v1/root/certificate >> 500: Unexpected field","stack":"MulterError: Unexpected field\n    at wrappedFileFilter (/home/rekasa/Projects/Kloudtrack/server/node_modules/multer/index.js:40:19)\n    at Multipart.<anonymous> (/home/rekasa/Projects/Kloudtrack/server/node_modules/multer/lib/make-middleware.js:109:7)\n    at Multipart.emit (node:events:518:28)\n    at Multipart.emit (node:domain:489:12)\n    at HeaderParser.cb (/home/rekasa/Projects/Kloudtrack/server/node_modules/busboy/lib/types/multipart.js:358:14)\n    at HeaderParser.push (/home/rekasa/Projects/Kloudtrack/server/node_modules/busboy/lib/types/multipart.js:162:20)\n    at SBMH.ssCb [as _cb] (/home/rekasa/Projects/Kloudtrack/server/node_modules/busboy/lib/types/multipart.js:394:37)\n    at feed (/home/rekasa/Projects/Kloudtrack/server/node_modules/streamsearch/lib/sbmh.js:219:14)\n    at SBMH.push (/home/rekasa/Projects/Kloudtrack/server/node_modules/streamsearch/lib/sbmh.js:104:16)\n    at Multipart._write (/home/rekasa/Projects/Kloudtrack/server/node_modules/busboy/lib/types/multipart.js:567:19)","timestamp":"2025-05-22T07:16:52.475Z"}
{"level":"error","message":"[POST] /api/v1/root/certificate >> 500: Unexpected field","stack":"MulterError: Unexpected field\n    at wrappedFileFilter (/home/rekasa/Projects/Kloudtrack/server/node_modules/multer/index.js:40:19)\n    at Multipart.<anonymous> (/home/rekasa/Projects/Kloudtrack/server/node_modules/multer/lib/make-middleware.js:109:7)\n    at Multipart.emit (node:events:518:28)\n    at Multipart.emit (node:domain:489:12)\n    at HeaderParser.cb (/home/rekasa/Projects/Kloudtrack/server/node_modules/busboy/lib/types/multipart.js:358:14)\n    at HeaderParser.push (/home/rekasa/Projects/Kloudtrack/server/node_modules/busboy/lib/types/multipart.js:162:20)\n    at SBMH.ssCb [as _cb] (/home/rekasa/Projects/Kloudtrack/server/node_modules/busboy/lib/types/multipart.js:394:37)\n    at feed (/home/rekasa/Projects/Kloudtrack/server/node_modules/streamsearch/lib/sbmh.js:219:14)\n    at SBMH.push (/home/rekasa/Projects/Kloudtrack/server/node_modules/streamsearch/lib/sbmh.js:104:16)\n    at Multipart._write (/home/rekasa/Projects/Kloudtrack/server/node_modules/busboy/lib/types/multipart.js:567:19)","timestamp":"2025-05-22T07:17:41.169Z"}
{"level":"error","message":"[POST] /api/v1/root/certificate >> 500: Unexpected field","stack":"MulterError: Unexpected field\n    at wrappedFileFilter (/home/rekasa/Projects/Kloudtrack/server/node_modules/multer/index.js:40:19)\n    at Multipart.<anonymous> (/home/rekasa/Projects/Kloudtrack/server/node_modules/multer/lib/make-middleware.js:109:7)\n    at Multipart.emit (node:events:518:28)\n    at Multipart.emit (node:domain:489:12)\n    at HeaderParser.cb (/home/rekasa/Projects/Kloudtrack/server/node_modules/busboy/lib/types/multipart.js:358:14)\n    at HeaderParser.push (/home/rekasa/Projects/Kloudtrack/server/node_modules/busboy/lib/types/multipart.js:162:20)\n    at SBMH.ssCb [as _cb] (/home/rekasa/Projects/Kloudtrack/server/node_modules/busboy/lib/types/multipart.js:394:37)\n    at feed (/home/rekasa/Projects/Kloudtrack/server/node_modules/streamsearch/lib/sbmh.js:219:14)\n    at SBMH.push (/home/rekasa/Projects/Kloudtrack/server/node_modules/streamsearch/lib/sbmh.js:104:16)\n    at Multipart._write (/home/rekasa/Projects/Kloudtrack/server/node_modules/busboy/lib/types/multipart.js:567:19)","timestamp":"2025-05-22T07:22:30.174Z"}
{"level":"error","message":"[POST] /api/v1/root/certificate >> 500: EACCES: permission denied, mkdir '/certificates'","stack":"Error: EACCES: permission denied, mkdir '/certificates'\n    at Object.mkdirSync (node:fs:1364:26)\n    at RootCertificateUploadService.getDiskDestination (/home/rekasa/Projects/Kloudtrack/server/dist/modules/root-certificate/upload.js:48:30)\n    at DiskStorage._handleFile (/home/rekasa/Projects/Kloudtrack/server/node_modules/multer/storage/disk.js:31:8)\n    at /home/rekasa/Projects/Kloudtrack/server/node_modules/multer/lib/make-middleware.js:139:17\n    at fileFilter (/home/rekasa/Projects/Kloudtrack/server/dist/modules/root-certificate/upload.js:71:17)\n    at wrappedFileFilter (/home/rekasa/Projects/Kloudtrack/server/node_modules/multer/index.js:44:7)\n    at Multipart.<anonymous> (/home/rekasa/Projects/Kloudtrack/server/node_modules/multer/lib/make-middleware.js:109:7)\n    at Multipart.emit (node:events:518:28)\n    at Multipart.emit (node:domain:489:12)\n    at HeaderParser.cb (/home/rekasa/Projects/Kloudtrack/server/node_modules/busboy/lib/types/multipart.js:358:14)","timestamp":"2025-05-22T07:23:08.910Z"}
{"level":"error","message":"[POST] /api/v1/root/certificate >> 500: Invalid Certificate Type - Only Root CA files are allowed","stack":"Error: Invalid Certificate Type - Only Root CA files are allowed\n    at RootCertificateUploadService.generateS3Key (/home/rekasa/Projects/Kloudtrack/server/dist/modules/root-certificate/upload.js:33:33)\n    at /home/rekasa/Projects/Kloudtrack/server/node_modules/run-parallel/index.js:46:7\n    at Array.forEach (<anonymous>)\n    at runParallel (/home/rekasa/Projects/Kloudtrack/server/node_modules/run-parallel/index.js:45:11)\n    at collect (/home/rekasa/Projects/Kloudtrack/server/node_modules/multer-s3/index.js:70:3)\n    at S3Storage._handleFile (/home/rekasa/Projects/Kloudtrack/server/node_modules/multer-s3/index.js:187:3)\n    at /home/rekasa/Projects/Kloudtrack/server/node_modules/multer/lib/make-middleware.js:139:17\n    at fileFilter (/home/rekasa/Projects/Kloudtrack/server/dist/modules/root-certificate/upload.js:71:17)\n    at wrappedFileFilter (/home/rekasa/Projects/Kloudtrack/server/node_modules/multer/index.js:44:7)\n    at Multipart.<anonymous> (/home/rekasa/Projects/Kloudtrack/server/node_modules/multer/lib/make-middleware.js:109:7)","timestamp":"2025-05-22T07:26:30.724Z"}
{"level":"error","message":"Database error: \nInvalid `database_config_1.prisma.user.findUnique()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/core/middlewares/auth.middleware.js:22:69\n\n  19     return next(new error_1.AppError(\"You are not logged in. Please log in to get access.\", 401));\n  20 }\n  21 const decoded = jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret);\n→ 22 const currentUser = await database_config_1.prisma.user.findUnique({\n       where: {\n         id: undefined,\n     ?   userName?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   firstName?: StringNullableFilter | String | Null,\n     ?   lastName?: StringNullableFilter | String | Null,\n     ?   role?: EnumRoleFilter | Role,\n     ?   password?: StringFilter | String,\n     ?   phone?: StringNullableFilter | String | Null,\n     ?   profilePicture?: StringNullableFilter | String | Null,\n     ?   createdByUserId?: IntNullableFilter | Int | Null,\n     ?   passwordChangedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdBy?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n     ?   createdUsers?: UserListRelationFilter,\n     ?   userOrganizations?: UserOrganizationListRelationFilter,\n     ?   command?: CommandListRelationFilter,\n     ?   station?: StationListRelationFilter,\n     ?   rootCertificate?: RootCertificateListRelationFilter,\n     ?   problemReport?: ProblemReportListRelationFilter,\n     ?   stationCertificate?: StationCertificateListRelationFilter,\n     ?   resetToken?: ResetTokenListRelationFilter\n       },\n       select: {\n         id: true,\n         email: true,\n         role: true,\n         passwordChangedAt: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `userName` or `email` arguments. Available options are marked with ?.","target":"user.findUnique","timestamp":"2025-05-22T08:43:50.957Z"}
{"level":"error","message":"Database error: \nInvalid `database_config_1.prisma.user.findUnique()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/core/middlewares/auth.middleware.js:22:69\n\n  19     return next(new error_1.AppError(\"You are not logged in. Please log in to get access.\", 401));\n  20 }\n  21 const decoded = jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret);\n→ 22 const currentUser = await database_config_1.prisma.user.findUnique({\n       where: {\n         id: undefined,\n     ?   userName?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   firstName?: StringNullableFilter | String | Null,\n     ?   lastName?: StringNullableFilter | String | Null,\n     ?   role?: EnumRoleFilter | Role,\n     ?   password?: StringFilter | String,\n     ?   phone?: StringNullableFilter | String | Null,\n     ?   profilePicture?: StringNullableFilter | String | Null,\n     ?   createdByUserId?: IntNullableFilter | Int | Null,\n     ?   passwordChangedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdBy?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n     ?   createdUsers?: UserListRelationFilter,\n     ?   userOrganizations?: UserOrganizationListRelationFilter,\n     ?   command?: CommandListRelationFilter,\n     ?   station?: StationListRelationFilter,\n     ?   rootCertificate?: RootCertificateListRelationFilter,\n     ?   problemReport?: ProblemReportListRelationFilter,\n     ?   stationCertificate?: StationCertificateListRelationFilter,\n     ?   resetToken?: ResetTokenListRelationFilter\n       },\n       select: {\n         id: true,\n         email: true,\n         role: true,\n         passwordChangedAt: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `userName` or `email` arguments. Available options are marked with ?.","target":"user.findUnique","timestamp":"2025-05-22T08:44:21.163Z"}
{"level":"error","message":"Database error: \nInvalid `database_config_1.prisma.user.findUnique()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/core/middlewares/auth.middleware.js:22:69\n\n  19     return next(new error_1.AppError(\"You are not logged in. Please log in to get access.\", 401));\n  20 }\n  21 const decoded = jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret);\n→ 22 const currentUser = await database_config_1.prisma.user.findUnique({\n       where: {\n         id: undefined,\n     ?   userName?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   firstName?: StringNullableFilter | String | Null,\n     ?   lastName?: StringNullableFilter | String | Null,\n     ?   role?: EnumRoleFilter | Role,\n     ?   password?: StringFilter | String,\n     ?   phone?: StringNullableFilter | String | Null,\n     ?   profilePicture?: StringNullableFilter | String | Null,\n     ?   createdByUserId?: IntNullableFilter | Int | Null,\n     ?   passwordChangedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdBy?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n     ?   createdUsers?: UserListRelationFilter,\n     ?   userOrganizations?: UserOrganizationListRelationFilter,\n     ?   command?: CommandListRelationFilter,\n     ?   station?: StationListRelationFilter,\n     ?   rootCertificate?: RootCertificateListRelationFilter,\n     ?   problemReport?: ProblemReportListRelationFilter,\n     ?   stationCertificate?: StationCertificateListRelationFilter,\n     ?   resetToken?: ResetTokenListRelationFilter\n       },\n       select: {\n         id: true,\n         email: true,\n         role: true,\n         passwordChangedAt: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `userName` or `email` arguments. Available options are marked with ?.","target":"user.findUnique","timestamp":"2025-05-22T08:44:50.197Z"}
{"level":"error","message":"Database error: \nInvalid `database_config_1.prisma.user.findUnique()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/core/middlewares/auth.middleware.js:22:69\n\n  19     return next(new error_1.AppError(\"You are not logged in. Please log in to get access.\", 401));\n  20 }\n  21 const decoded = jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret);\n→ 22 const currentUser = await database_config_1.prisma.user.findUnique({\n       where: {\n         id: undefined,\n     ?   userName?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   firstName?: StringNullableFilter | String | Null,\n     ?   lastName?: StringNullableFilter | String | Null,\n     ?   role?: EnumRoleFilter | Role,\n     ?   password?: StringFilter | String,\n     ?   phone?: StringNullableFilter | String | Null,\n     ?   profilePicture?: StringNullableFilter | String | Null,\n     ?   createdByUserId?: IntNullableFilter | Int | Null,\n     ?   passwordChangedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdBy?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n     ?   createdUsers?: UserListRelationFilter,\n     ?   userOrganizations?: UserOrganizationListRelationFilter,\n     ?   command?: CommandListRelationFilter,\n     ?   station?: StationListRelationFilter,\n     ?   rootCertificate?: RootCertificateListRelationFilter,\n     ?   problemReport?: ProblemReportListRelationFilter,\n     ?   stationCertificate?: StationCertificateListRelationFilter,\n     ?   resetToken?: ResetTokenListRelationFilter\n       },\n       select: {\n         id: true,\n         email: true,\n         role: true,\n         passwordChangedAt: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `userName` or `email` arguments. Available options are marked with ?.","target":"user.findUnique","timestamp":"2025-05-22T08:45:25.387Z"}
{"level":"error","message":"Database error: \nInvalid `database_config_1.prisma.user.findUnique()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/core/middlewares/auth.middleware.js:22:69\n\n  19     return next(new error_1.AppError(\"You are not logged in. Please log in to get access.\", 401));\n  20 }\n  21 const decoded = jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret);\n→ 22 const currentUser = await database_config_1.prisma.user.findUnique({\n       where: {\n         id: undefined,\n     ?   userName?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   firstName?: StringNullableFilter | String | Null,\n     ?   lastName?: StringNullableFilter | String | Null,\n     ?   role?: EnumRoleFilter | Role,\n     ?   password?: StringFilter | String,\n     ?   phone?: StringNullableFilter | String | Null,\n     ?   profilePicture?: StringNullableFilter | String | Null,\n     ?   createdByUserId?: IntNullableFilter | Int | Null,\n     ?   passwordChangedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdBy?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n     ?   createdUsers?: UserListRelationFilter,\n     ?   userOrganizations?: UserOrganizationListRelationFilter,\n     ?   command?: CommandListRelationFilter,\n     ?   station?: StationListRelationFilter,\n     ?   rootCertificate?: RootCertificateListRelationFilter,\n     ?   problemReport?: ProblemReportListRelationFilter,\n     ?   stationCertificate?: StationCertificateListRelationFilter,\n     ?   resetToken?: ResetTokenListRelationFilter\n       },\n       select: {\n         id: true,\n         email: true,\n         role: true,\n         passwordChangedAt: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `userName` or `email` arguments. Available options are marked with ?.","target":"user.findUnique","timestamp":"2025-05-22T08:48:09.208Z"}
{"level":"error","message":"Database error: \nInvalid `database_config_1.prisma.user.findUnique()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/core/middlewares/auth.middleware.js:22:69\n\n  19     return next(new error_1.AppError(\"You are not logged in. Please log in to get access.\", 401));\n  20 }\n  21 const decoded = jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret);\n→ 22 const currentUser = await database_config_1.prisma.user.findUnique({\n       where: {\n         id: undefined,\n     ?   userName?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   firstName?: StringNullableFilter | String | Null,\n     ?   lastName?: StringNullableFilter | String | Null,\n     ?   role?: EnumRoleFilter | Role,\n     ?   password?: StringFilter | String,\n     ?   phone?: StringNullableFilter | String | Null,\n     ?   profilePicture?: StringNullableFilter | String | Null,\n     ?   createdByUserId?: IntNullableFilter | Int | Null,\n     ?   passwordChangedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdBy?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n     ?   createdUsers?: UserListRelationFilter,\n     ?   userOrganizations?: UserOrganizationListRelationFilter,\n     ?   command?: CommandListRelationFilter,\n     ?   station?: StationListRelationFilter,\n     ?   rootCertificate?: RootCertificateListRelationFilter,\n     ?   problemReport?: ProblemReportListRelationFilter,\n     ?   stationCertificate?: StationCertificateListRelationFilter,\n     ?   resetToken?: ResetTokenListRelationFilter\n       },\n       select: {\n         id: true,\n         email: true,\n         role: true,\n         passwordChangedAt: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `userName` or `email` arguments. Available options are marked with ?.","target":"user.findUnique","timestamp":"2025-05-22T08:48:26.258Z"}
{"level":"error","message":"Database error: \nInvalid `database_config_1.prisma.user.findUnique()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/core/middlewares/auth.middleware.js:22:69\n\n  19     return next(new error_1.AppError(\"You are not logged in. Please log in to get access.\", 401));\n  20 }\n  21 const decoded = jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret);\n→ 22 const currentUser = await database_config_1.prisma.user.findUnique({\n       where: {\n         id: undefined,\n     ?   userName?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   firstName?: StringNullableFilter | String | Null,\n     ?   lastName?: StringNullableFilter | String | Null,\n     ?   role?: EnumRoleFilter | Role,\n     ?   password?: StringFilter | String,\n     ?   phone?: StringNullableFilter | String | Null,\n     ?   profilePicture?: StringNullableFilter | String | Null,\n     ?   createdByUserId?: IntNullableFilter | Int | Null,\n     ?   passwordChangedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdBy?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n     ?   createdUsers?: UserListRelationFilter,\n     ?   userOrganizations?: UserOrganizationListRelationFilter,\n     ?   command?: CommandListRelationFilter,\n     ?   station?: StationListRelationFilter,\n     ?   rootCertificate?: RootCertificateListRelationFilter,\n     ?   problemReport?: ProblemReportListRelationFilter,\n     ?   stationCertificate?: StationCertificateListRelationFilter,\n     ?   resetToken?: ResetTokenListRelationFilter\n       },\n       select: {\n         id: true,\n         email: true,\n         role: true,\n         passwordChangedAt: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `userName` or `email` arguments. Available options are marked with ?.","target":"user.findUnique","timestamp":"2025-05-22T08:49:47.191Z"}
{"level":"error","message":"Database error: \nInvalid `database_config_1.prisma.user.findUnique()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/core/middlewares/auth.middleware.js:22:69\n\n  19     return next(new error_1.AppError(\"You are not logged in. Please log in to get access.\", 401));\n  20 }\n  21 const decoded = jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret);\n→ 22 const currentUser = await database_config_1.prisma.user.findUnique({\n       where: {\n         id: undefined,\n     ?   userName?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   firstName?: StringNullableFilter | String | Null,\n     ?   lastName?: StringNullableFilter | String | Null,\n     ?   role?: EnumRoleFilter | Role,\n     ?   password?: StringFilter | String,\n     ?   phone?: StringNullableFilter | String | Null,\n     ?   profilePicture?: StringNullableFilter | String | Null,\n     ?   createdByUserId?: IntNullableFilter | Int | Null,\n     ?   passwordChangedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdBy?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n     ?   createdUsers?: UserListRelationFilter,\n     ?   userOrganizations?: UserOrganizationListRelationFilter,\n     ?   command?: CommandListRelationFilter,\n     ?   station?: StationListRelationFilter,\n     ?   rootCertificate?: RootCertificateListRelationFilter,\n     ?   problemReport?: ProblemReportListRelationFilter,\n     ?   stationCertificate?: StationCertificateListRelationFilter,\n     ?   resetToken?: ResetTokenListRelationFilter\n       },\n       select: {\n         id: true,\n         email: true,\n         role: true,\n         passwordChangedAt: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `userName` or `email` arguments. Available options are marked with ?.","target":"user.findUnique","timestamp":"2025-05-22T08:50:17.461Z"}
{"level":"error","message":"Database error: \nInvalid `database_config_1.prisma.user.findUnique()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/core/middlewares/auth.middleware.js:22:69\n\n  19     return next(new error_1.AppError(\"You are not logged in. Please log in to get access.\", 401));\n  20 }\n  21 const decoded = jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret);\n→ 22 const currentUser = await database_config_1.prisma.user.findUnique({\n       where: {\n         id: undefined,\n     ?   userName?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   firstName?: StringNullableFilter | String | Null,\n     ?   lastName?: StringNullableFilter | String | Null,\n     ?   role?: EnumRoleFilter | Role,\n     ?   password?: StringFilter | String,\n     ?   phone?: StringNullableFilter | String | Null,\n     ?   profilePicture?: StringNullableFilter | String | Null,\n     ?   createdByUserId?: IntNullableFilter | Int | Null,\n     ?   passwordChangedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeNullableFilter | DateTime | Null,\n     ?   createdBy?: UserNullableScalarRelationFilter | UserWhereInput | Null,\n     ?   createdUsers?: UserListRelationFilter,\n     ?   userOrganizations?: UserOrganizationListRelationFilter,\n     ?   command?: CommandListRelationFilter,\n     ?   station?: StationListRelationFilter,\n     ?   rootCertificate?: RootCertificateListRelationFilter,\n     ?   problemReport?: ProblemReportListRelationFilter,\n     ?   stationCertificate?: StationCertificateListRelationFilter,\n     ?   resetToken?: ResetTokenListRelationFilter\n       },\n       select: {\n         id: true,\n         email: true,\n         role: true,\n         passwordChangedAt: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `userName` or `email` arguments. Available options are marked with ?.","target":"user.findUnique","timestamp":"2025-05-23T02:15:08.753Z"}
{"level":"error","message":"Database error: \nInvalid `this.prisma.stationCertificate.delete()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station-certificate/repository.js:129:53\n\n  126     });\n  127 }\n  128 async delete(id) {\n→ 129     return this.prisma.stationCertificate.delete(\nAn operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.","target":"stationCertificate.delete","timestamp":"2025-05-23T03:41:46.298Z"}
{"level":"error","message":"[DELETE] /api/v1/certificate/station/1 >> 500: Failed to delete certificates: \nInvalid `this.prisma.stationCertificate.delete()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station-certificate/repository.js:129:53\n\n  126     });\n  127 }\n  128 async delete(id) {\n→ 129     return this.prisma.stationCertificate.delete(\nAn operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.","stack":"Error: Failed to delete certificates: \nInvalid `this.prisma.stationCertificate.delete()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station-certificate/repository.js:129:53\n\n  126     });\n  127 }\n  128 async delete(id) {\n→ 129     return this.prisma.stationCertificate.delete(\nAn operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.\n    at StationCertificateService.deleteCertificate (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station-certificate/service.js:264:19)\n    at async /home/rekasa/Projects/Kloudtrack/server/dist/modules/station-certificate/controller.js:71:9","timestamp":"2025-05-23T03:41:46.300Z"}
{"level":"error","message":"[PUT] /api/v1/certificate/station/1 >> 500: Object not found in S3: /certificates/AWS-2025-004/AWS-2025-004-certificate.pem.crt","stack":"Error: Object not found in S3: /certificates/AWS-2025-004/AWS-2025-004-certificate.pem.crt\n    at S3Service.getObject (/home/rekasa/Projects/Kloudtrack/server/dist/core/service/aws-s3.js:58:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async StationCertificateService.updateCertificate (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station-certificate/service.js:170:33)\n    at async /home/rekasa/Projects/Kloudtrack/server/dist/modules/station-certificate/controller.js:60:24","timestamp":"2025-05-23T06:39:01.855Z"}
{"level":"error","message":"[PUT] /api/v1/certificate/station/1 >> 500: Object not found in S3: /certificates/AWS-2025-004/AWS-2025-004-certificate.pem.crt","stack":"Error: Object not found in S3: /certificates/AWS-2025-004/AWS-2025-004-certificate.pem.crt\n    at S3Service.getObject (/home/rekasa/Projects/Kloudtrack/server/dist/core/service/aws-s3.js:58:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async StationCertificateService.updateCertificate (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station-certificate/service.js:170:33)\n    at async /home/rekasa/Projects/Kloudtrack/server/dist/modules/station-certificate/controller.js:60:24","timestamp":"2025-05-23T06:46:00.617Z"}
{"level":"error","message":"[PUT] /api/v1/certificate/station/1 >> 500: Object not found in S3: /certificates/AWS-2025-004/AWS-2025-004-certificate.pem.crt","stack":"Error: Object not found in S3: /certificates/AWS-2025-004/AWS-2025-004-certificate.pem.crt\n    at S3Service.getObject (/home/rekasa/Projects/Kloudtrack/server/dist/core/service/aws-s3.js:58:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async StationCertificateService.updateCertificate (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station-certificate/service.js:171:33)\n    at async /home/rekasa/Projects/Kloudtrack/server/dist/modules/station-certificate/controller.js:60:24","timestamp":"2025-05-23T06:46:20.309Z"}
{"level":"error","message":"[PUT] /api/v1/certificate/station/1 >> 500: Failed to update certificates in S3: New station certificate and the current one has the same content","stack":"Error: Failed to update certificates in S3: New station certificate and the current one has the same content\n    at StationCertificateService.updateCertificate (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station-certificate/service.js:267:19)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async /home/rekasa/Projects/Kloudtrack/server/dist/modules/station-certificate/controller.js:60:24","timestamp":"2025-05-23T06:48:54.198Z"}
{"level":"error","time":"2025-05-23T07:12:45.432Z","pid":76882,"hostname":"kloudtech-regee-pop-os","message":"\nInvalid `this.prisma.station.create()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:31:36\n\n  28     };\n  29 }\n  30 async create(data, userId) {\n→ 31     return this.prisma.station.create({\n           data: {\n             isActive: false,\n             activatedAt: null,\n             createdByUserId: 1,\n         +   stationName: String\n           },\n           include: {\n             certificate: true,\n             organization: true,\n             user: {\n               select: {\n                 id: true,\n                 userName: true,\n                 firstName: true,\n                 lastName: true,\n                 role: true\n               }\n             }\n           }\n         })\n\nArgument `stationName` is missing.","target":"station.create","timestamp":"2025-05-23T07:12:45.432Z","msg":"Database error:"}
{"level":"error","time":"2025-05-23T07:12:45.433Z","pid":76882,"hostname":"kloudtech-regee-pop-os","name":"PrismaClientValidationError","clientVersion":"6.7.0","msg":"Failed to create station:"}
{"level":"error","time":"2025-05-23T07:12:45.434Z","pid":76882,"hostname":"kloudtech-regee-pop-os","stack":"PrismaClientValidationError: \nInvalid `this.prisma.station.create()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:31:36\n\n  28     };\n  29 }\n  30 async create(data, userId) {\n→ 31     return this.prisma.station.create({\n           data: {\n             isActive: false,\n             activatedAt: null,\n             createdByUserId: 1,\n         +   stationName: String\n           },\n           include: {\n             certificate: true,\n             organization: true,\n             user: {\n               select: {\n                 id: true,\n                 userName: true,\n                 firstName: true,\n                 lastName: true,\n                 role: true\n               }\n             }\n           }\n         })\n\nArgument `stationName` is missing.\n    at An (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:32:1363)\n    at zn.handleRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:7102)\n    at zn.handleAndLogRequestError (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6784)\n    at zn.request (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:124:6491)\n    at async l (/home/rekasa/Projects/Kloudtrack/server/node_modules/.prisma/client/runtime/library.js:133:9778)\n    at async StationService.createStation (/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/service.js:12:29)\n    at async /home/rekasa/Projects/Kloudtrack/server/dist/modules/station/controller.js:22:28","msg":"[POST] /api/v1/station/1/activate >> 500: \nInvalid `this.prisma.station.create()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:31:36\n\n  28     };\n  29 }\n  30 async create(data, userId) {\n→ 31     return this.prisma.station.create({\n           data: {\n             isActive: false,\n             activatedAt: null,\n             createdByUserId: 1,\n         +   stationName: String\n           },\n           include: {\n             certificate: true,\n             organization: true,\n             user: {\n               select: {\n                 id: true,\n                 userName: true,\n                 firstName: true,\n                 lastName: true,\n                 role: true\n               }\n             }\n           }\n         })\n\nArgument `stationName` is missing."}
{"level":"error","time":"2025-05-23T07:13:23.213Z","pid":77543,"hostname":"kloudtech-regee-pop-os","msg":"Failed to connect station 1:"}
{"level":"error","time":"2025-05-23T07:13:23.213Z","pid":77543,"hostname":"kloudtech-regee-pop-os","msg":"Failed to initialize IoT Manager:"}
{"level":"error","time":"2025-05-23T07:13:28.273Z","pid":77802,"hostname":"kloudtech-regee-pop-os","msg":"Failed to connect station 1:"}
{"level":"error","time":"2025-05-23T07:13:28.273Z","pid":77802,"hostname":"kloudtech-regee-pop-os","msg":"Failed to initialize IoT Manager:"}
{"level":"error","time":"2025-05-23T07:24:35.278Z","pid":79541,"hostname":"kloudtech-regee-pop-os","msg":"Failed to connect station 1:"}
{"level":"error","time":"2025-05-23T07:24:35.278Z","pid":79541,"hostname":"kloudtech-regee-pop-os","msg":"Failed to initialize IoT Manager:"}
{"level":"error","time":"2025-05-23T07:24:40.098Z","pid":79810,"hostname":"kloudtech-regee-pop-os","msg":"Failed to connect station 1:"}
{"level":"error","time":"2025-05-23T07:24:40.098Z","pid":79810,"hostname":"kloudtech-regee-pop-os","msg":"Failed to initialize IoT Manager:"}
{"level":"error","time":"2025-05-23T07:26:25.103Z","pid":80202,"hostname":"kloudtech-regee-pop-os","msg":"Failed to connect station 1:"}
{"level":"error","time":"2025-05-23T07:26:25.103Z","pid":80202,"hostname":"kloudtech-regee-pop-os","msg":"Failed to initialize IoT Manager:"}
{"level":"error","time":"2025-05-23T07:27:33.678Z","pid":80442,"hostname":"kloudtech-regee-pop-os","msg":"Failed to connect station 1:"}
{"level":"error","time":"2025-05-23T07:27:33.678Z","pid":80442,"hostname":"kloudtech-regee-pop-os","msg":"Failed to initialize IoT Manager:"}
{"level":"error","time":"2025-05-23T07:27:45.357Z","pid":80559,"hostname":"kloudtech-regee-pop-os","msg":"Failed to connect station 1:"}
{"level":"error","time":"2025-05-23T07:27:45.357Z","pid":80559,"hostname":"kloudtech-regee-pop-os","msg":"Failed to initialize IoT Manager:"}
{"level":"error","time":"2025-05-23T07:27:54.959Z","pid":80674,"hostname":"kloudtech-regee-pop-os","msg":"Failed to connect station 1:"}
{"level":"error","time":"2025-05-23T07:27:54.960Z","pid":80674,"hostname":"kloudtech-regee-pop-os","msg":"Failed to initialize IoT Manager:"}
{"level":"error","time":"2025-05-23T07:28:18.982Z","pid":80822,"hostname":"kloudtech-regee-pop-os","msg":"Failed to connect station 1:"}
{"level":"error","time":"2025-05-23T07:28:18.983Z","pid":80822,"hostname":"kloudtech-regee-pop-os","msg":"Failed to initialize IoT Manager:"}
{"level":"error","time":"2025-05-23T07:28:53.755Z","pid":80999,"hostname":"kloudtech-regee-pop-os","msg":"Failed to connect station 1:"}
{"level":"error","time":"2025-05-23T07:28:53.755Z","pid":80999,"hostname":"kloudtech-regee-pop-os","msg":"Failed to initialize IoT Manager:"}
{"level":"error","time":"2025-05-23T07:29:38.296Z","pid":81220,"hostname":"kloudtech-regee-pop-os","msg":"Failed to connect station 1:"}
{"level":"error","time":"2025-05-23T07:29:38.296Z","pid":81220,"hostname":"kloudtech-regee-pop-os","msg":"Failed to initialize IoT Manager:"}
{"level":"error","time":"2025-05-23T07:29:42.484Z","pid":81293,"hostname":"kloudtech-regee-pop-os","msg":"Failed to connect station 1:"}
{"level":"error","time":"2025-05-23T07:29:42.484Z","pid":81293,"hostname":"kloudtech-regee-pop-os","msg":"Failed to initialize IoT Manager:"}
{"level":"error","time":"2025-05-23T07:29:44.763Z","pid":81354,"hostname":"kloudtech-regee-pop-os","msg":"Failed to connect station 1:"}
{"level":"error","time":"2025-05-23T07:29:44.763Z","pid":81354,"hostname":"kloudtech-regee-pop-os","msg":"Failed to initialize IoT Manager:"}
{"level":"error","time":"2025-05-23T07:31:10.307Z","pid":81644,"hostname":"kloudtech-regee-pop-os","msg":"Failed to connect station 1:"}
{"level":"error","time":"2025-05-23T07:31:10.307Z","pid":81644,"hostname":"kloudtech-regee-pop-os","msg":"Failed to initialize IoT Manager:"}
{"level":"error","time":"2025-05-23T07:31:25.924Z","pid":81780,"hostname":"kloudtech-regee-pop-os","msg":"Failed to connect station 1:"}
{"level":"error","time":"2025-05-23T07:31:25.925Z","pid":81780,"hostname":"kloudtech-regee-pop-os","msg":"Failed to initialize IoT Manager:"}
{"level":"error","time":"2025-05-23T07:32:04.045Z","pid":81984,"hostname":"kloudtech-regee-pop-os","msg":"Failed to connect station 1:"}
{"level":"error","time":"2025-05-23T07:32:04.046Z","pid":81984,"hostname":"kloudtech-regee-pop-os","msg":"Failed to initialize IoT Manager:"}
{"level":"error","time":"2025-05-23T07:32:07.082Z","pid":82067,"hostname":"kloudtech-regee-pop-os","msg":"Failed to connect station 1:"}
{"level":"error","time":"2025-05-23T07:32:07.082Z","pid":82067,"hostname":"kloudtech-regee-pop-os","msg":"Failed to initialize IoT Manager:"}
{"level":"error","time":"2025-05-23T07:32:33.101Z","pid":82230,"hostname":"kloudtech-regee-pop-os","msg":"Failed to connect station 1:"}
{"level":"error","time":"2025-05-23T07:32:33.101Z","pid":82230,"hostname":"kloudtech-regee-pop-os","msg":"Failed to initialize IoT Manager:"}
{"level":"error","time":"2025-05-23T07:32:48.607Z","pid":82367,"hostname":"kloudtech-regee-pop-os","msg":"Failed to connect station 1:"}
{"level":"error","time":"2025-05-23T07:32:48.607Z","pid":82367,"hostname":"kloudtech-regee-pop-os","msg":"Failed to initialize IoT Manager:"}
{"level":"error","time":"2025-05-26T06:41:52.283Z","pid":4765,"hostname":"kloudtech-regee-pop-os","message":"\nInvalid `this.prisma.station.findUnique()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:87:42\n\n  84     });\n  85 }\n  86 async findById(id) {\n→ 87     return await this.prisma.station.findUnique(\nThe column `commands.type` does not exist in the current database.","target":"station.findUnique","timestamp":"2025-05-26T06:41:52.283Z","msg":"Database error:"}
{"level":"error","time":"2025-05-26T06:41:52.283Z","pid":4765,"hostname":"kloudtech-regee-pop-os","code":"P2022","meta":{"modelName":"Station","column":"commands.type"},"clientVersion":"6.7.0","name":"PrismaClientKnownRequestError","msg":"Failed to get station 1:"}
{"level":"error","time":"2025-05-26T06:41:52.284Z","pid":4765,"hostname":"kloudtech-regee-pop-os","code":"P2022","meta":{"modelName":"Station","column":"commands.type"},"clientVersion":"6.7.0","name":"PrismaClientKnownRequestError","msg":"Failed to connect station 1:"}
{"level":"error","time":"2025-05-26T06:41:52.284Z","pid":4765,"hostname":"kloudtech-regee-pop-os","code":"P2022","meta":{"modelName":"Station","column":"commands.type"},"clientVersion":"6.7.0","name":"PrismaClientKnownRequestError","msg":"Failed to initialize IoT Manager:"}
{"level":"error","time":"2025-05-26T06:42:38.246Z","pid":5448,"hostname":"kloudtech-regee-pop-os","message":"\nInvalid `this.prisma.station.findUnique()` invocation in\n/home/rekasa/Projects/Kloudtrack/server/dist/modules/station/repository.js:87:42\n\n  84     });\n  85 }\n  86 async findById(id) {\n→ 87     return await this.prisma.station.findUnique(\nThe column `commands.type` does not exist in the current database.","target":"station.findUnique","timestamp":"2025-05-26T06:42:38.246Z","msg":"Database error:"}
{"level":"error","time":"2025-05-26T06:42:38.246Z","pid":5448,"hostname":"kloudtech-regee-pop-os","code":"P2022","meta":{"modelName":"Station","column":"commands.type"},"clientVersion":"6.7.0","name":"PrismaClientKnownRequestError","msg":"Failed to get station 1:"}
{"level":"error","time":"2025-05-26T06:42:38.246Z","pid":5448,"hostname":"kloudtech-regee-pop-os","code":"P2022","meta":{"modelName":"Station","column":"commands.type"},"clientVersion":"6.7.0","name":"PrismaClientKnownRequestError","msg":"Failed to connect station 1:"}
{"level":"error","time":"2025-05-26T06:42:38.246Z","pid":5448,"hostname":"kloudtech-regee-pop-os","code":"P2022","meta":{"modelName":"Station","column":"commands.type"},"clientVersion":"6.7.0","name":"PrismaClientKnownRequestError","msg":"Failed to initialize IoT Manager:"}
